<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>cEngF13h&#39;s b1og</title>
  
  <subtitle>Recording learing process</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-06-10T08:01:35.493Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>cEngF13h</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>python basic 4</title>
    <link href="http://yoursite.com/2018/06/06/python%20basic%204/"/>
    <id>http://yoursite.com/2018/06/06/python basic 4/</id>
    <published>2018-06-06T07:39:21.000Z</published>
    <updated>2018-06-10T08:01:35.493Z</updated>
    
    <content type="html"><![CDATA[<p>昨天关于那个id()内置函数 百度了下 开了眼界</p><p>id() 函数 配合 is 使用</p><p>当一个数据是较小的整数时<br>如 a=1 b=1 a is b==&gt;True is比较的是a与b分配的内存地址</p><p>为了提高内存利用效率对于一些简单的对象，如一些数值较小的int对象，python采取重用对象内存的办法，如指向a=2，b=2时，由于2作为简单的int类型且数值小，python不会两次为其分配内存，而是只分配一次，然后将a与b同时指向已分配的对象</p><p>而一个数据是较大的整数或浮点数<br>如a=2.0 b=2.0 a is b==&gt;False 则分配不同的内存地址</p><p>汉诺塔递归问题 啊啊啊算法是真的辣鸡 - -!<br><a id="more"></a></p><h4 id="List列表"><a href="#List列表" class="headerlink" title="List列表"></a>List列表</h4><p>del 删除命令</p><p>如a=[2,4,21,2]<br>del a[2] ==&gt; [2,4,2]<br>只是在原列表改 未生成新的列表<br>del一个变量后不能再使用此变量</p><p>不同列表相连 用加法 相同列表相 连用乘法</p><h4 id="列表内涵"><a href="#列表内涵" class="headerlink" title="列表内涵"></a>列表内涵</h4><p>此方法主要针对于用for循环打印时不能生成列表</p><p>用for来创建列表<br>a=[1,2,3,4,5]<br>b=[i for i in a] ==&gt; [1,2,3,4,5] </p><p>第一个i是生成b列表中的数</p><p>列表也可循环嵌套<br>c=[m+n for m in a for n in b]</p><h4 id="常用列表函数-len-max-min"><a href="#常用列表函数-len-max-min" class="headerlink" title="常用列表函数 len max min"></a>常用列表函数 len max min</h4><p>list() 将其他格式的数据转换为list<br>例如 s=”Hello World”<br>list(s)==&gt; [‘H’,’e’……]</p><p>把range产生的内容转换成list<br>list(range(12,19))</p><h4 id="传值和传地址的区别"><a href="#传值和传地址的区别" class="headerlink" title="传值和传地址的区别"></a>传值和传地址的区别</h4><p>简单数字 采用传值操作 </p><p>复杂变量 采用传址操作</p><p>append() 在列表末尾插入一个内容</p><p>insert(index,data) 指定位置插入</p><p>在index前插入data</p><p>pop 把最后一个元素取出来</p><p>remove 在列表中删除指定值元素</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;昨天关于那个id()内置函数 百度了下 开了眼界&lt;/p&gt;
&lt;p&gt;id() 函数 配合 is 使用&lt;/p&gt;
&lt;p&gt;当一个数据是较小的整数时&lt;br&gt;如 a=1 b=1 a is b==&amp;gt;True is比较的是a与b分配的内存地址&lt;/p&gt;
&lt;p&gt;为了提高内存利用效率对于一些简单的对象，如一些数值较小的int对象，python采取重用对象内存的办法，如指向a=2，b=2时，由于2作为简单的int类型且数值小，python不会两次为其分配内存，而是只分配一次，然后将a与b同时指向已分配的对象&lt;/p&gt;
&lt;p&gt;而一个数据是较大的整数或浮点数&lt;br&gt;如a=2.0 b=2.0 a is b==&amp;gt;False 则分配不同的内存地址&lt;/p&gt;
&lt;p&gt;汉诺塔递归问题 啊啊啊算法是真的辣鸡 - -!&lt;br&gt;
    
    </summary>
    
      <category term="Learning" scheme="http://yoursite.com/categories/Learning/"/>
    
      <category term="python" scheme="http://yoursite.com/categories/Learning/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python basic 3</title>
    <link href="http://yoursite.com/2018/06/05/python%20basic%203/"/>
    <id>http://yoursite.com/2018/06/05/python basic 3/</id>
    <published>2018-06-05T12:15:41.000Z</published>
    <updated>2018-06-10T07:51:17.007Z</updated>
    
    <content type="html"><![CDATA[<p> 这几天持续颓废… 真想找个队友一起监督..无奈 等下学期再说吧！</p><p>补充上周学的笔记：</p><p>input() 返回类型是字符串 需要用int( )转换<br>range(1,10)打印[1-10)</p><p>range()函数 python 2 3区别很大<br>randint是特例  左右都包含</p><p>pass用于占位</p><p>print函数默认打印一行 结尾自动换行</p><p>end()函数可以使输出不换行<br><a id="more"></a></p><h3 id="收集参数"><a href="#收集参数" class="headerlink" title="收集参数"></a>收集参数</h3><pre><code>1. def func(*args):  func_body按照list使用方式访问args得到传入的参数调用：  func(p1, p2, p3, .....)</code></pre><!--more--><p>代码实例：</p><pre><code>收集参数代码函数模拟一个学生进行自我介绍，但具体内容不清楚args把他看做一个listdef stu( *args):print(&quot;Hello 大家好，我自我介绍以下，简答说两句：&quot;)type函数作用是检测变量的类型print(type(args))for item in args:print(item)stu(&quot;liuying&quot;, 18, &quot;北京大通州区&quot;, &quot;wangxiaojing&quot;, &quot;single&quot;)//用循环用遍历了args</code></pre><h3 id="收集参数之关键字收集参数"><a href="#收集参数之关键字收集参数" class="headerlink" title="收集参数之关键字收集参数"></a>收集参数之关键字收集参数</h3><pre><code>def func( **kwargs):   func_body    调用：    func(p1=v1, p2=v2, p3=v3........)  kwargs一般约定俗成  调用的时候，把多余的关键字参数放入kwargs  访问kwargs需要按字典格式访问</code></pre><p>代码实例：</p><pre><code>调用的时候需要使用关键字参数调用def stu( **kwargs):在函数体内对于kwargs的使用不用带星号print(&quot;Hello 大家好，我先自我介绍一下：&quot;)print(type(kwargs))对于字典的访问，python2 和python3有区别for k,v in kwargs.items():print(k, &quot;---&quot;, v)stu(name=&quot;liuying&quot;,  age=19, addr=&quot;北京大通州区&quot;, lover=&quot;王晓静&quot;, work=&quot;Teacher&quot;)print(&quot;*&quot; * 50)stu(name=&quot;周大神&quot;)</code></pre><h3 id="收集参数的解包问题"><a href="#收集参数的解包问题" class="headerlink" title="收集参数的解包问题"></a>收集参数的解包问题</h3><pre><code>def stu(*args):print(&quot;哈哈哈哈哈&quot;)n 用来表示循环次数主要用来调试n = 0for i in args:    print(type(i))    print(n)    n += 1    print(i)    l = [&quot;liuying&quot;, 19, 23, &quot;wangxiaojing&quot;]     stu(l)    此时，args的表示形式是字典内一个list类型的元素，即 arg = ([&quot;liuying&quot;, 19, 23, &quot;wangxiaojing&quot;],)    很显然跟我们最初的想法违背    此时的调用，我们就需要解包符号，即调用的时候前面加一个星号    stu(*l)</code></pre><p>同理用**kwargs 得用两个**解包</p><p>Globals与Locals 内嵌函数</p><p>locals 是只读的,不可修改， 而globals可以修改，</p><p>原因是：</p><p>locals（）实际上没有返回局部名字空间，它返回的是一个拷贝。所以对它进行修改，修改的是拷贝，而对实际的局部名字空间中的变量值并无影响。</p><p>globals（）返回的是实际的全局名字空间，而不是一个拷贝: 与 locals 的行为完全相反。<br>所以对 globals 所返回的 dictionary 的任何的改动都会直接影响到全局变量的取值。</p><p>参考见 <a href="https://blog.csdn.net/sxingming/article/details/52061630" target="_blank" rel="noopener">Globals与Locals 内嵌函数</a></p><h3 id="eval-函数"><a href="#eval-函数" class="headerlink" title="eval()函数"></a>eval()函数</h3><p>把一个字符串当成一个表达式来执行， 返回表达式执行后的结果</p><p>语法：</p><p>eval(string_code, globals=None, locals=None)</p><h3 id="exec-函数"><a href="#exec-函数" class="headerlink" title="exec()函数"></a>exec()函数</h3><p>跟eval功能类似， 但是，不返回结果</p><p>语法：</p><p>  exec(string_code, globals=None, locals=None)</p><p>type是内置函数，负责打印出变量的类型</p><h3 id="list列表常用操作"><a href="#list列表常用操作" class="headerlink" title="list列表常用操作"></a>list列表常用操作</h3><p>-使用下标操作 从0开始</p><p>如列表l=[2,3,4,2,21,4,2]</p><h4 id="分片操作访问-包含左边下标值-不包含右边下标值"><a href="#分片操作访问-包含左边下标值-不包含右边下标值" class="headerlink" title="分片操作访问 包含左边下标值 不包含右边下标值"></a>分片操作访问 包含左边下标值 不包含右边下标值</h4><p>print(l[1:4])==&gt; [3,4,2]</p><p>print(l[:])==&gt;整个列表</p><p>print(l[2:])==&gt;[4,2,21,4,2]</p><p>print(l[:4])==&gt;[2,3,4,2]</p><p>分片操作可以控制增长幅度 默认为1</p><p>print(l[1:6:2])==&gt;[3,2,4]</p><p>下标可以超出范围，超出后不在考虑多余下标内容</p><p>分片之负数下标</p><p>如列表l=[2,3,4,2,21,4,2]</p><p>print(l[-4:-2])==&gt; NULL</p><p>分片左边的值默认小于右边的值 且负数下标从-1开始</p><p>如果一定要左边的值大于右边的值 那么增长幅度得变为负数</p><p>内置函数id 负责显示一个变量或者数据的唯一确定编号<br>疑问 详细了解id内置函数</p><p>分片操作是生成一个新的list 地址不同 不同份数据 可用内置函数id检测</p><p>而赋值操作是同一个list 地址相同 相同数据</p><p>—–Ending—–</p><p>总结:Bad day,studying makes me happy!!!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt; 这几天持续颓废… 真想找个队友一起监督..无奈 等下学期再说吧！&lt;/p&gt;
&lt;p&gt;补充上周学的笔记：&lt;/p&gt;
&lt;p&gt;input() 返回类型是字符串 需要用int( )转换&lt;br&gt;range(1,10)打印[1-10)&lt;/p&gt;
&lt;p&gt;range()函数 python 2 3区别很大&lt;br&gt;randint是特例  左右都包含&lt;/p&gt;
&lt;p&gt;pass用于占位&lt;/p&gt;
&lt;p&gt;print函数默认打印一行 结尾自动换行&lt;/p&gt;
&lt;p&gt;end()函数可以使输出不换行&lt;br&gt;
    
    </summary>
    
      <category term="Learning" scheme="http://yoursite.com/categories/Learning/"/>
    
      <category term="python" scheme="http://yoursite.com/categories/Learning/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>sql injection 1</title>
    <link href="http://yoursite.com/2018/05/30/sql%20injection%201/"/>
    <id>http://yoursite.com/2018/05/30/sql injection 1/</id>
    <published>2018-05-30T11:15:26.000Z</published>
    <updated>2018-06-10T07:53:19.546Z</updated>
    
    <content type="html"><![CDATA[<p>##False注入<br> 以xxxxx=0为主题<br><img src="https://p3.ssl.qhimg.com/t01aff368d1f78f00ff.jpg" alt=""><br><a id="more"></a><br><img src="https://p2.ssl.qhimg.com/t01384c749fc9052787.jpg" alt=""></p><p>两张图中 用 username=0 passwd=0 分别爆出数据库 但数据个数不同</p><p>首先为什么会爆出数据库？涉及到MYSQL隐式类型转化</p><pre><code>关于官方文档中是这么说的The following rules describe how conversion occurs for comparison operations:If one or both arguments are NULL, the result of the comparison is NULL, except for the NULL-safe &lt;=&gt; equality comparison operator. For NULL &lt;=&gt; NULL, the result is true. No conversion is needed.If both arguments in a comparison operation are strings, they are compared as strings.If both arguments are integers, they are compared as integers.Hexadecimal values are treated as binary strings if not compared to a number.If one of the arguments is a TIMESTAMP or DATETIME column and the other argument is a constant, the constant is converted to a timestamp before the comparison is performed. This is done to be more ODBC-friendly. Note that this is not done for the arguments to IN()! To be safe, always use complete datetime, date, or time strings when doing comparisons. For example, to achieve best results when using BETWEEN with date or time values, use CAST() to explicitly convert the values to the desired data type.If one of the arguments is a decimal value, comparison depends on the other argument. The arguments are compared as decimal values if the other argument is a decimal or integer value, or as floating-point values if the other argument is a floating-point value.In all other cases, the arguments are compared as floating-point (real) numbers.其中大致是：如果两个参数比较，有至少一个NULL，结果就是NULL，除了是用NULL&lt;=&gt;NULL 会返回1。不做类型转换两个参数都是字符串，按照字符串比较。不做类型转换两个参数都是整数，按照整数比较。不做类型转换如果不与数字进行比较，则将十六进制值视为二进制字符串。有一个参数是 TIMESTAMP 或 DATETIME，并且另外一个参数是常量，常量会被转换为时间戳有一个参数是 decimal 类型，如果另外一个参数是 decimal 或者整数，会将整数转换为 decimal 后进行比较，如果另外一个参数是浮点数，则会把 decimal 转换为浮点数进行比较所有其他情况下，两个参数都会被转换为浮点数再进行比较</code></pre><p>注意最后一句话就行: 有其他情况下，两个参数都会被转换为浮点数再进行比较<br>这里=之前的username 和pwd都是字符串 =之后的0是数字</p><p>所以这里当字符串转换为浮点数 username中admin test leej都是以字母开头 passwd以数字开头</p><p>当字符串转换为浮点数时 如果数字开头 则会从数字后截断 </p><p>所以这里才会存在username爆出三段数据 passwd爆出两端数据</p><p>除此之外还可以通过比较运算符来构造xxxxx=0<br>这里就举几个例子</p><pre><code>where username=&apos;&apos;=0&lt;=&gt;1#&apos;</code></pre><p>‘’=0&lt;=&gt;1#’ 首先最后的’被#截断 整体变为’’=0&lt;=&gt;1</p><p>‘’=0 结果为0 整体变为 0&lt;==&gt;1 结果为 0<br>所以最后转化成为 username=0</p><h4 id="到这里想起之前注入的几个函数再复习下"><a href="#到这里想起之前注入的几个函数再复习下" class="headerlink" title="到这里想起之前注入的几个函数再复习下"></a>到这里想起之前注入的几个函数再复习下</h4><h4 id="1-left-right"><a href="#1-left-right" class="headerlink" title="1.left()/right()"></a>1.left()/right()</h4><pre><code>left/right(str,length)eg: SELECT LEFT(NAME,2),RIGHT(NAME,2) FROM T1   </code></pre><p>返回结果为 ‘NA’ 、’ME’   *从字符串左边开始截取长度为2的字符串   从字符串右边开始截取长度为2的字符串</p><h4 id="2-substr"><a href="#2-substr" class="headerlink" title="2.substr()"></a>2.substr()</h4><pre><code>substr(str,begin-location,length(可选))</code></pre><p>规定在字符串的何处开始。</p><p>length：<br>正数 - 在字符串的指定位置开始</p><p>负数 - 在从字符串结尾开始的指定位置开始</p><p>0 - 在字符串中的第一个字符处开始</p><h4 id="3-mid"><a href="#3-mid" class="headerlink" title="3.mid()"></a>3.mid()</h4><pre><code>mid(str,begin-location,length(可选))</code></pre><p>与substr唯一区别在于mid必须规定开始位置 且起始值为1</p><h4 id="4-rand"><a href="#4-rand" class="headerlink" title="4.rand()"></a>4.rand()</h4><pre><code>rand(begin,end)</code></pre><p>即begin-end之间取随机数</p><h4 id="5-if"><a href="#5-if" class="headerlink" title="5.if()"></a>5.if()</h4><pre><code>if(a,b,c)</code></pre><p>如果a=ture 则返回b 如果a=false 则返回c</p><p>——————————今晚结束————————————</p><p>总结一个字：太菜！！！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;##False注入&lt;br&gt; 以xxxxx=0为主题&lt;br&gt;&lt;img src=&quot;https://p3.ssl.qhimg.com/t01aff368d1f78f00ff.jpg&quot; alt=&quot;&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Learning" scheme="http://yoursite.com/categories/Learning/"/>
    
      <category term="sql injection" scheme="http://yoursite.com/categories/Learning/sql-injection/"/>
    
    
      <category term="sql injection" scheme="http://yoursite.com/tags/sql-injection/"/>
    
  </entry>
  
  <entry>
    <title>python basic 2</title>
    <link href="http://yoursite.com/2018/05/30/python%20basic%202/"/>
    <id>http://yoursite.com/2018/05/30/python basic 2/</id>
    <published>2018-05-30T06:43:43.000Z</published>
    <updated>2018-06-10T07:54:06.476Z</updated>
    
    <content type="html"><![CDATA[<p>块注释: 三个单引号或者双引号开始结束</p><p>查看关键字方法 import keyword –&gt;keyword.kwlist</p><p> //去试试换行输出</p><h4 id="标准数据-六种"><a href="#标准数据-六种" class="headerlink" title="标准数据 六种"></a>标准数据 六种</h4><a id="more"></a><p>数字类型 Number<br>字符串类型 str<br>列表 list<br>元组 tuple<br>字典 Dictionary<br>集合 set</p><p>-数字类型：无大小限制<br>二进制：以0b开头<br>八进制：以为0o开头 包含0-7的数字<br>十六进制：每四位二进制表示一位十六进制数 包含0-9 a-f 以0x开头<br>//百度算法</p><p>单引号双引号只能表示一行 </p><h4 id="字符串的格式化"><a href="#字符串的格式化" class="headerlink" title="字符串的格式化"></a>字符串的格式化</h4><p>-利用百分号% </p><p>例如 </p><p>单个 print(“I love %s” % “dsadas”)<br>双个 print(“I love %s ,she are %d” % (“asdas”,12))</p><h4 id="format函数格式化"><a href="#format函数格式化" class="headerlink" title="format函数格式化"></a>format函数格式化</h4><p>-利用format函数 推荐<br>以{} 和： 代替 百分号 后面用.连接后+format带参数完成</p><p>例如:print(“你输入的性别是:{0}”.format(gender))</p><p>python无自增自减</p><p>逻辑运算符 转为数学运算 我觉得这个太巧妙了！！！<br><img src="https://i.imgur.com/vSbrcsM.png" alt=""><br>短路问题 一旦能够确定整个式子值 后面都不运算 精辟！！！</p><p>成员运算符号<br>in not in</p><p>身份运算 is is not</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;块注释: 三个单引号或者双引号开始结束&lt;/p&gt;
&lt;p&gt;查看关键字方法 import keyword –&amp;gt;keyword.kwlist&lt;/p&gt;
&lt;p&gt; //去试试换行输出&lt;/p&gt;
&lt;h4 id=&quot;标准数据-六种&quot;&gt;&lt;a href=&quot;#标准数据-六种&quot; class=&quot;headerlink&quot; title=&quot;标准数据 六种&quot;&gt;&lt;/a&gt;标准数据 六种&lt;/h4&gt;
    
    </summary>
    
      <category term="Learning" scheme="http://yoursite.com/categories/Learning/"/>
    
      <category term="python" scheme="http://yoursite.com/categories/Learning/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>python basic 1</title>
    <link href="http://yoursite.com/2018/05/29/python%20basic%201/"/>
    <id>http://yoursite.com/2018/05/29/python basic 1/</id>
    <published>2018-05-29T02:58:31.000Z</published>
    <updated>2018-05-30T11:17:09.744Z</updated>
    
    <content type="html"><![CDATA[<p>python大小写敏感</p><p>注释符 #</p><p>在Python中有4种类型的数——整数、长整数、浮点数和复数。</p><p>(-5+4j)和(2.3-4.6j)是复数的例子 注意py里是a±bj 数学公式里是a±bi<br><a id="more"></a><br>在py中 ‘ ’ ===“ ” 所有的空白，即空格和制表符都照原样保留</p><p>在一个字符串中，行末的单独一个反斜杠表示字符串在下一行继续，而不是开始一个新的行</p><p>自然字符串<br>如果你想要指示某些不需要如转义符那样的特别处理的字符串，那么你需要指定一个自然字符串。自然字符串通过给字符串加上前缀r或R来指定。例如r”Newlines are indicated by \n”。</p><p>字符串是不可变的</p><p>变量不用声明数据类型</p><p>** 表示x^y<br>按位： 与 或 异或 翻转</p><p>not 布尔非</p><p>if…elif…else 无switch语句</p><p>布尔类型 True False 注意大小写</p><p>函数range（onenum，twonum，count）序列<br>从onenum到twonum不包括num 当有count时count为步数</p><p>for循环 for…in 例如for i in range（1，3）</p><p>DocStrings 文档字符串<br>即函数体中有字符串 可以用 函数名.<strong>doc</strong> 单独提取文档字符串</p><p>文档字符串的惯例是一个多行字符串，它的首行以大写字母开始，句号结尾。第二行是空行，从第三行开始是详细的描述。 强烈建议 你在你的函数中使用文档字符串时遵循这个惯例。</p><p>随机敲了一点代码：</p><pre><code>def func(x,y):&apos;&apos;&apos;The first def py.I konw it&apos;s a very nice day.so let&apos;s enjoy it .&apos;&apos;&apos;return x*yprint &apos;x*y=&apos;,func(21,22)print func.__doc__ #Write by cEngF13h </code></pre><p>运行结果：</p><pre><code>x*y= 462The first def py.    I konw it&apos;s a very nice day.    so let&apos;s enjoy it .</code></pre><p>——————————今晚学习到这—————————————</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;python大小写敏感&lt;/p&gt;
&lt;p&gt;注释符 #&lt;/p&gt;
&lt;p&gt;在Python中有4种类型的数——整数、长整数、浮点数和复数。&lt;/p&gt;
&lt;p&gt;(-5+4j)和(2.3-4.6j)是复数的例子 注意py里是a±bj 数学公式里是a±bi&lt;br&gt;
    
    </summary>
    
      <category term="Learning" scheme="http://yoursite.com/categories/Learning/"/>
    
      <category term="python" scheme="http://yoursite.com/categories/Learning/python/"/>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>F1rst b1og（MarkdownPad 2 入门)</title>
    <link href="http://yoursite.com/2018/05/24/F1rst%20b1og/"/>
    <id>http://yoursite.com/2018/05/24/F1rst b1og/</id>
    <published>2018-05-24T04:30:43.000Z</published>
    <updated>2018-05-29T13:09:25.909Z</updated>
    
    <content type="html"><![CDATA[<h2 id="表示标题大小-html的-lt-h-标签"><a href="#表示标题大小-html的-lt-h-标签" class="headerlink" title="#表示标题大小===html的\&lt;h>标签;"></a>#表示标题大小===html的\&lt;h>标签;</h2><h2 id="‘-‘-空格-‘-‘-or-‘-‘-表示无序列表"><a href="#‘-‘-空格-‘-‘-or-‘-‘-表示无序列表" class="headerlink" title="‘  -  ‘ + 空格   +  ‘ - ‘ or ‘ * ‘ 表示无序列表"></a>‘  -  ‘ + 空格   +  ‘ - ‘ or ‘ * ‘ 表示无序列表</h2><h2 id="‘-‘-一个字符的空格表示引用"><a href="#‘-‘-一个字符的空格表示引用" class="headerlink" title="‘ > ‘ +一个字符的空格表示引用"></a>‘ > ‘ +一个字符的空格表示引用</h2><a id="more"></a><h2 id="插入图片方法"><a href="#插入图片方法" class="headerlink" title="插入图片方法 ![]()"></a>插入图片方法 ![]()</h2><h4 id="我发现其实完整写法是-Alt-text-picture-href-“optional-title”"><a href="#我发现其实完整写法是-Alt-text-picture-href-“optional-title”" class="headerlink" title="我发现其实完整写法是![Alt text](picture-href “optional title”)"></a>我发现其实完整写法是![Alt text](picture-href “optional title”)</h4><h6 id="Alt-text为图片丢失时爆出的信息-据说还有为SEO提供搜索-optional-title为鼠标悬置于图片时爆出的信息"><a href="#Alt-text为图片丢失时爆出的信息-据说还有为SEO提供搜索-optional-title为鼠标悬置于图片时爆出的信息" class="headerlink" title="Alt text为图片丢失时爆出的信息 据说还有为SEO提供搜索 optional title为鼠标悬置于图片时爆出的信息"></a>Alt text为图片丢失时爆出的信息 据说还有为SEO提供搜索 optional title为鼠标悬置于图片时爆出的信息</h6><h3 id="例-https-i-imgur-com-TpB1UcB-jpg"><a href="#例-https-i-imgur-com-TpB1UcB-jpg" class="headerlink" title="例:![](https://i.imgur.com/TpB1UcB.jpg)"></a>例:![](<a href="https://i.imgur.com/TpB1UcB.jpg" target="_blank" rel="noopener">https://i.imgur.com/TpB1UcB.jpg</a>)</h3><p><img src="https://i.imgur.com/TpB1UcB.jpg" alt=""></p><h3 id="图片的链接为-https-i-imgur-com-TpB1UcB-jpg"><a href="#图片的链接为-https-i-imgur-com-TpB1UcB-jpg" class="headerlink" title="图片的链接为 https://i.imgur.com/TpB1UcB.jpg"></a>图片的链接为 <a href="https://i.imgur.com/TpB1UcB.jpg" target="_blank" rel="noopener">https://i.imgur.com/TpB1UcB.jpg</a></h3><h2 id="插入链接方法"><a href="#插入链接方法" class="headerlink" title="插入链接方法"></a>插入链接方法</h2><h3 id="www-baidu-com-www-baidu-com）此处应该是半角"><a href="#www-baidu-com-www-baidu-com）此处应该是半角" class="headerlink" title="[www.baidu.com](www.baidu.com）此处应该是半角"></a>[<a href="http://www.baidu.com]" target="_blank" rel="noopener">www.baidu.com]</a>(<a href="http://www.baidu.com）此处应该是半角" target="_blank" rel="noopener">www.baidu.com）此处应该是半角</a></h3><h4 id="方括号里面写链接的名字-括号里面写链接"><a href="#方括号里面写链接的名字-括号里面写链接" class="headerlink" title="方括号里面写链接的名字 括号里面写链接"></a>方括号里面写链接的名字 括号里面写链接</h4><h2 id="粗体-斜体"><a href="#粗体-斜体" class="headerlink" title="粗体 斜体"></a>粗体 斜体</h2><p>粗体 <strong>粗体</strong> 斜体 <em>斜体</em></p><h4 id="包裹粗体"><a href="#包裹粗体" class="headerlink" title="**包裹粗体"></a>**包裹粗体</h4><h4 id="包裹斜体"><a href="#包裹斜体" class="headerlink" title="* 包裹斜体"></a>* 包裹斜体</h4><h2 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h2><h4 id="这个貌似有点鸡肋-要用表格再说把"><a href="#这个貌似有点鸡肋-要用表格再说把" class="headerlink" title="这个貌似有点鸡肋 要用表格再说把~"></a>这个貌似有点鸡肋 要用表格再说把~</h4><table><thead><tr><th>Tables</th><th style="text-align:center">Are</th><th style="text-align:right">Cool</th></tr></thead><tbody><tr><td>col 3 is</td><td style="text-align:center">right-aligned</td><td style="text-align:right">$1600</td></tr><tr><td>col 2 is</td><td style="text-align:center">centered</td><td style="text-align:right">$12</td></tr><tr><td>zebra stripes</td><td style="text-align:center">are neat</td><td style="text-align:right">$1</td></tr></tbody></table><h2 id="最后就是MarkdownPad-2支持内嵌html"><a href="#最后就是MarkdownPad-2支持内嵌html" class="headerlink" title="最后就是MarkdownPad 2支持内嵌html"></a>最后就是MarkdownPad 2支持内嵌html</h2><h4 id="因为MarkdownPad-2不支持修改图片尺寸-字体颜色风格之类的-还有吧啦吧啦很多-所以html还是很重要的"><a href="#因为MarkdownPad-2不支持修改图片尺寸-字体颜色风格之类的-还有吧啦吧啦很多-所以html还是很重要的" class="headerlink" title="因为MarkdownPad 2不支持修改图片尺寸 字体颜色风格之类的 还有吧啦吧啦很多 所以html还是很重要的"></a>因为MarkdownPad 2不支持修改图片尺寸 字体颜色风格之类的 还有吧啦吧啦很多 所以html还是很重要的</h4><h4 id="插入图片不说太多-此处用相对路径不好因为容易造成网页丢失图-还是上传图床后使用绝对路径吧"><a href="#插入图片不说太多-此处用相对路径不好因为容易造成网页丢失图-还是上传图床后使用绝对路径吧" class="headerlink" title="插入图片不说太多 此处用相对路径不好因为容易造成网页丢失图 还是上传图床后使用绝对路径吧"></a>插入图片不说太多 此处用相对路径不好因为容易造成网页丢失图 还是上传图床后使用绝对路径吧</h4><h5 id="图床推荐"><a href="#图床推荐" class="headerlink" title="图床推荐:"></a>图床推荐:</h5><h5 id="七牛https-portal-qiniu-com-不过我注册的时候邮箱一直接受不到验证码…"><a href="#七牛https-portal-qiniu-com-不过我注册的时候邮箱一直接受不到验证码…" class="headerlink" title="七牛https://portal.qiniu.com 不过我注册的时候邮箱一直接受不到验证码…"></a>七牛<a href="https://portal.qiniu.com" target="_blank" rel="noopener">https://portal.qiniu.com</a> 不过我注册的时候邮箱一直接受不到验证码…</h5><h5 id="在用贴图库http-www-tietuku-com-自动生成图片外链-html代码-markdown代码-之后有更好的可以share！"><a href="#在用贴图库http-www-tietuku-com-自动生成图片外链-html代码-markdown代码-之后有更好的可以share！" class="headerlink" title="在用贴图库http://www.tietuku.com 自动生成图片外链 html代码 markdown代码 之后有更好的可以share！"></a>在用贴图库<a href="http://www.tietuku.com" target="_blank" rel="noopener">http://www.tietuku.com</a> 自动生成图片外链 html代码 markdown代码 之后有更好的可以share！</h5><p><img src="http://i2.bvimg.com/647010/adb7621f338b88c8.jpg" width="200"></p><h6 id="我这里用html标签插入了一张图片-修改了它的宽为200px"><a href="#我这里用html标签插入了一张图片-修改了它的宽为200px" class="headerlink" title="我这里用html标签插入了一张图片 修改了它的宽为200px"></a>我这里用html标签插入了一张图片 修改了它的宽为200px</h6><pre><code>&lt;img src=&quot;http://i2.bvimg.com/647010/adb7621f338b88c8.jpg&quot; width=200&gt;</code></pre><h2 id="还可以用html标签-修改字体颜色-字体风格"><a href="#还可以用html标签-修改字体颜色-字体风格" class="headerlink" title="还可以用html标签 修改字体颜色 字体风格"></a>还可以用html标签 修改字体<font face="微软雅黑" color="red">颜色</font> 字体<font face="楷体" color="red">风格</font></h2><h2 id="代码块实现-在代码前加Tab即可"><a href="#代码块实现-在代码前加Tab即可" class="headerlink" title="代码块实现 在代码前加Tab即可"></a>代码块实现 在代码前加Tab即可</h2><pre><code>function addEvent(obj,type,fn){        if(obj.addEventListener){            return obj.addEventListener(type,fn);        }else if(obj.attachEvent){            return obj.attachEvent(&apos;on&apos;+type,fn);        }    }function addEvent(obj,type,fn){        if(obj.addEventListener){            return obj.addEventListener(type,fn);        }else if(obj.attachEvent){            return obj.attachEvent(&apos;on&apos;+type,fn);        }    }function addEvent(obj,type,fn){        if(obj.addEventListener){            return obj.addEventListener(type,fn);        }else if(obj.attachEvent){            return obj.attachEvent(&apos;on&apos;+type,fn);        }    }</code></pre><h3 id="撒花！！花了一个晚自习时间学习MarkdownPad-2-基础操作-今天就这样到此为止吧-当然还要优化"><a href="#撒花！！花了一个晚自习时间学习MarkdownPad-2-基础操作-今天就这样到此为止吧-当然还要优化" class="headerlink" title="撒花！！花了一个晚自习时间学习MarkdownPad 2 基础操作 今天就这样到此为止吧 当然还要优化"></a>撒花！！花了一个晚自习时间学习MarkdownPad 2 基础操作 今天就这样到此为止吧 当然还要优化</h3><h3 id="tag："><a href="#tag：" class="headerlink" title="tag："></a>tag：</h3><p>1：更换theme 这个theme实在太ugly了<br>2：学习如何实现标题为超链接点进去是内容 而不是内容就占一大版 </p><h4 id="Write-by-cEngF13h"><a href="#Write-by-cEngF13h" class="headerlink" title="Write by cEngF13h"></a>Write by cEngF13h</h4><p>资料均出自知乎 简书 csdn </p><p>2018/5/24 20:34:37 </p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;表示标题大小-html的-lt-h-标签&quot;&gt;&lt;a href=&quot;#表示标题大小-html的-lt-h-标签&quot; class=&quot;headerlink&quot; title=&quot;#表示标题大小===html的\&amp;lt;h&gt;标签;&quot;&gt;&lt;/a&gt;#表示标题大小===html的\&amp;lt;h&gt;标签;&lt;/h2&gt;&lt;h2 id=&quot;‘-‘-空格-‘-‘-or-‘-‘-表示无序列表&quot;&gt;&lt;a href=&quot;#‘-‘-空格-‘-‘-or-‘-‘-表示无序列表&quot; class=&quot;headerlink&quot; title=&quot;‘  -  ‘ + 空格   +  ‘ - ‘ or ‘ * ‘ 表示无序列表&quot;&gt;&lt;/a&gt;‘  -  ‘ + 空格   +  ‘ - ‘ or ‘ * ‘ 表示无序列表&lt;/h2&gt;&lt;h2 id=&quot;‘-‘-一个字符的空格表示引用&quot;&gt;&lt;a href=&quot;#‘-‘-一个字符的空格表示引用&quot; class=&quot;headerlink&quot; title=&quot;‘ &gt; ‘ +一个字符的空格表示引用&quot;&gt;&lt;/a&gt;‘ &gt; ‘ +一个字符的空格表示引用&lt;/h2&gt;
    
    </summary>
    
      <category term="Learning" scheme="http://yoursite.com/categories/Learning/"/>
    
      <category term="MarkdownPad 2" scheme="http://yoursite.com/categories/Learning/MarkdownPad-2/"/>
    
    
      <category term="MarkdownPad 2" scheme="http://yoursite.com/tags/MarkdownPad-2/"/>
    
  </entry>
  
</feed>
